PROG -> program { DESCR OP }

DESCR -> DESCR1 ; DESCR | eps
DESCR1 -> int VAR VAR1 | string VAR VAR1 | real VAR VAR1 
VAR1 -> , VAR VAR1 | eps
VAR -> identifier VAR2 <prog.put_lex(standart_semicolon);>
VAR2 -> = CONST1 | eps
CONST1 -> + CONST2 | - CONST2 | + CONST2 | - CONST2 | cstring | cint | creal
CONST2 -> creal | cint | + CONST2 | - CONST2

OP (statement) -> OP1 OP | eps;
OP1 -> IFELSE | WHILE | FOR | READ | WRITE | COMPLEXOP | EXPRESSIONOP | continue ;
IFELSE -> if ( EXPR ) OP1 else OP1
WHILE -> while ( EXPR ) OP1
READ -> read ( ident ) ;
WRITE -> write ( EXPR WRITE1 ) ; // тут хитро сделана вставка ; - лучше смотреть по коду
WRITE1 -> , EXPR WRITE1 | eps
COMPLEXOP -> { OP }
EXPRESSIONOP -> EXPR ;
FOR -> for ( FOR1 ; FOR1 ; FOR1 ) OP1 
FOR1 -> EXPR | eps                    // ВАЖНО: из EXPR не выводится eps 
CONTINUE -> continue ;

EXPR -> EXPR1 EXPR11 <prog.put_lex(standart_semicolon);>
EXPR11 -> = EXPR1 EXPR11 | eps 
EXPR1 -> EXPR2 EXPROR
EXPROR -> or EXPR2 EXPROR | eps
EXPR2 -> EXPR3 EXPRAND
EXPRAND -> and EXPR3 EXPRAND | eps
EXPR3 -> EXPR4 EXPR41
EXPR41 -> < EXPR3 | > EXPR3 | <= EXPR3 | >= EXPR3 | == EXPR3 | != EXPR3
EXPR4 -> EXPR5 EXPR51
EXPR51 -> + EXPR5 EXPR51 | - EXPR5 EXPR51 | eps
EXPR5 -> EXPR6 EXPR61
EXPR61 -> * EXPR6 EXPR61 | / EXPR6 EXPR61 | eps
EXPR6 -> not EXPR7 | EXPR7
EXPR7 -> ident | creal | cint | cstring | (EXPR)


<prog.put_lex(standart_semicolon);> - ; в ПОЛИЗ нужна для того, чтобы на этапе выполнения не произошло переполнения стека, в котором происходят вычисления
(при встрече ; из стека вычислений будем изымать верхний элемент)